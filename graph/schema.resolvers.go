package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"

	"github.com/jgero/hmc-datastore/graph/model"
	"github.com/jgero/hmc-datastore/graph/repository"
)

// CreatePerson is the resolver for the createPerson field.
func (r *mutationResolver) CreatePerson(ctx context.Context, input model.NewPerson) (*model.Person, error) {
	repo := repository.GetNeo4jRepo()
	return repo.WritePerson(ctx, &input)
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.NewPost) (*model.Post, error) {
	repo := repository.GetNeo4jRepo()
	return repo.WritePost(ctx, &input)
}

// SetKeywords is the resolver for the setKeywords field.
func (r *mutationResolver) SetKeywords(ctx context.Context, input model.SetKeywords) ([]model.KeywordLink, error) {
	repo := repository.GetNeo4jRepo()
	return repo.WriteKeywords(ctx, &input)
}

// Keywords is the resolver for the keywords field.
func (r *personResolver) Keywords(ctx context.Context, obj *model.Person) ([]*model.Keyword, error) {
	repo := repository.GetNeo4jRepo()
	return repo.GetKeywordsForUuid(ctx, obj.UUID)
}

// Writer is the resolver for the writer field.
func (r *postResolver) Writer(ctx context.Context, obj *model.Post) (*model.Person, error) {
	repo := repository.GetNeo4jRepo()
	return repo.GetWriter(ctx, obj)
}

// Keywords is the resolver for the keywords field.
func (r *postResolver) Keywords(ctx context.Context, obj *model.Post) ([]*model.Keyword, error) {
	repo := repository.GetNeo4jRepo()
	return repo.GetKeywordsForUuid(ctx, obj.UUID)
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context, limit int64, skip int64) ([]*model.Post, error) {
	repo := repository.GetNeo4jRepo()
	return repo.GetPosts(ctx, limit, skip)
}

// Keywords is the resolver for the keywords field.
func (r *queryResolver) Keywords(ctx context.Context) ([]*model.Keyword, error) {
	repo := repository.GetNeo4jRepo()
	return repo.GetKeywords(ctx)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Person returns PersonResolver implementation.
func (r *Resolver) Person() PersonResolver { return &personResolver{r} }

// Post returns PostResolver implementation.
func (r *Resolver) Post() PostResolver { return &postResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type personResolver struct{ *Resolver }
type postResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
